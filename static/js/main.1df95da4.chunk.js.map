{"version":3,"sources":["utils/generateArrayOfLength.ts","utils/shuffleArray.ts","utils/colorMapToSortingPoints.ts","utils/camelCaseToCaseText.ts","hooks/useInterval.tsx","hooks/useModal.tsx","hooks/useWindowSize.tsx","contexts/SortingContext.tsx","contexts/ArrayContext.tsx","contexts/StatusContext.tsx","App/Header/PlayPauseButton.tsx","App/Header/RefreshArrayButton.tsx","App/Header/ArrayLengthSlider.tsx","App/Header/FrequencySlider.tsx","App/Header/CustomArrayButton/ArrayInput.tsx","App/Header/CustomArrayButton/GenerateButton.tsx","App/Header/CustomArrayButton/ArrayModal.tsx","App/Header/CustomArrayButton/index.tsx","App/Header/index.tsx","App/Sider/AlgorithmSelector.tsx","components/CodeEditor.tsx","components/ArrayCanvas/Bar.tsx","components/ArrayCanvas/index.tsx","utils/ValueMapper.ts","App/Sider/AlgorithmEditor.tsx","App/Sider/index.tsx","App/Content/Visualizer.tsx","App/Content/index.tsx","App/index.tsx","ContextProvider.tsx","reportWebVitals.ts","index.tsx","algorithms/selectionSort.ts","algorithms/bubbleSort.ts","algorithms/mergeSort.ts","algorithms/quickSort.ts","algorithms/shellSort.ts","algorithms/heapSort.ts","algorithms/emptySort.ts","contexts/AlgorithmContext.tsx"],"names":["generateArrayOfLength","size","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffleArray","Array","from","x","i","colorMapToSortingPoints","colorMap","result","Object","values","forEach","point","camelCaseToCaseText","s","replace","charAt","toUpperCase","slice","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useModal","useState","isShowing","setIsShowing","toggle","useWindowSize","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","SortingStateContext","React","createContext","undefined","SortingActionsContext","SortingProvider","children","useArrayState","algorithm","useAlgorithmState","sortingSteps","setSortingSteps","points","setPoints","frequency","setFrequency","isPlaying","useStatusState","finish","useStatusActions","interval","next","done","value","Provider","changeFrequency","useSortingState","context","useContext","Error","ArrayStateContext","ArrayActionsContext","INITIAL_ARRAY","ArrayProvider","arrayLength","setArrayLength","setArray","customArrayString","setCustomArrayString","validCustomArrayString","match","generateArray","n","refreshArray","replaceArray","arr","split","map","el","parseInt","useArrayActions","StatusStateContext","StatusActionsContext","StatusProvider","compileAlgorithm","useAlgorithmActions","status","setStatus","isFinished","play","pause","PlayPauseButton","onClick","RefreshArrayButton","ArrayLengthSlider","className","min","max","onChange","FrequencySlider","useSortingActions","tipFormatter","ArrayInput","TextArea","rows","placeholder","e","val","target","GenerateButton","type","disabled","ArrayModal","visible","hide","onCancel","footer","title","CustomArrayButton","Header","wrap","AlgorithmSelector","selectedAlgorithm","algorithmNames","selectAlgorithm","name","Option","CodeEditor","mode","theme","width","height","showPrintMargin","showGutter","highlightActiveLine","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","Bar","color","style","backgroundColor","memo","ArrayCanvas","heightMapper","originalInterval","targetInterval","low1","high1","low2","high2","round","ValueMapper","nr","index","AlgorithmEditor","algorithmString","setAlgorithmString","Sider","smallWidth","siderTriggerWidth","siderWidth","collapsible","collapsedWidth","Visualizer","Content","App","ContextProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","selectionSort","bubbleSort","mergeSort","quickSort","heapSort","AlgorithmStateContext","AlgorithmActionsContext","keys","algorithms","AlgorithmProvider","setSelectedAlgorithm","setAlgorithm","sortingAlgorithm","eval"],"mappings":"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","file":"static/js/main.1df95da4.chunk.js","sourcesContent":["import { shuffleArray } from './index';\n\nexport default function generateArrayOfLength(size: number) {\n  const array = Array.from({ length: size }, (x, i) => i);\n\n  return shuffleArray(array);\n}\n","export default function shuffleArray<T>(array: T[]) {\n  let currentIndex = array.length;\n  let temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n","import { ColorMap, SortingPoints } from 'types';\n\nconst colorMapToSortingPoints = (colorMap: ColorMap): SortingPoints => {\n  const result = {} as SortingPoints;\n\n  Object.values(colorMap).forEach((point) => {\n    result[point] = 'red';\n  });\n\n  return result;\n};\n\nexport default colorMapToSortingPoints;\n","const camelCaseToCaseText = (s: string) => {\n  const result = s.replace(/([A-Z])/g, ' $1');\n  return result.charAt(0).toUpperCase() + result.slice(1);\n};\n\nexport default camelCaseToCaseText;\n","import { useRef, useEffect } from 'react';\n\nconst useInterval = (callback: () => void, delay: number | null) => {\n  const savedCallback = useRef<() => void | null>();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      if (typeof savedCallback?.current !== 'undefined') {\n        savedCallback?.current();\n      }\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n\nexport default useInterval;\n","import { useState } from 'react';\n\nconst useModal = () => {\n  const [isShowing, setIsShowing] = useState(false);\n\n  function toggle() {\n    setIsShowing(!isShowing);\n  }\n\n  return {\n    isShowing,\n    toggle,\n  }\n};\n\nexport default useModal;\n","import { useLayoutEffect, useState } from 'react';\n\nconst useWindowSize = () => {\n  const [size, setSize] = useState<[number, number]>([0, 0]);\n  useLayoutEffect(() => {\n    function updateSize() {\n      setSize([window.innerWidth, window.innerHeight]);\n    }\n    window.addEventListener('resize', updateSize);\n    updateSize();\n    return () => window.removeEventListener('resize', updateSize);\n  }, []);\n  return size;\n};\n\nexport default useWindowSize;\n","import React, { useState, useEffect } from 'react';\n\nimport { ColorMapGenerator, SortingPoints } from 'types';\n\nimport { colorMapToSortingPoints } from 'utils';\n\nimport { useInterval } from 'hooks';\nimport {\n  useArrayState,\n  useAlgorithmState,\n  useStatusState,\n  useStatusActions,\n} from 'contexts';\n\ntype State = {\n  array: number[];\n  frequency: number;\n  points: SortingPoints;\n};\n\ntype Actions = {\n  changeFrequency: (arg0: number) => void;\n};\n\nconst SortingStateContext = React.createContext<State | undefined>(undefined);\nconst SortingActionsContext = React.createContext<Actions | undefined>(\n  undefined\n);\n\nconst INITIAL_FREQUENCY = 60;\n\nconst SortingProvider: React.FC = ({ children }) => {\n  const { array } = useArrayState();\n  const { algorithm } = useAlgorithmState();\n\n  const [sortingSteps, setSortingSteps] = useState<ColorMapGenerator>();\n  const [points, setPoints] = useState({});\n\n  useEffect(() => {\n    setSortingSteps(algorithm ? algorithm(array) : undefined);\n    setPoints({});\n  }, [array, algorithm]);\n\n  const [frequency, setFrequency] = useState(INITIAL_FREQUENCY);\n  const changeFrequency = (frequency: number) => setFrequency(frequency);\n\n  const { isPlaying } = useStatusState();\n  const { finish } = useStatusActions();\n\n  let interval: number | null = 1000 / frequency;\n  if (!isPlaying) interval = null;\n\n  useInterval(() => {\n    if (!sortingSteps) return;\n\n    const next = sortingSteps.next();\n\n    if (next.done) return finish();\n\n    const colorMap = next.value;\n    const points = colorMapToSortingPoints(colorMap);\n    setPoints(points);\n  }, interval);\n\n  return (\n    <SortingStateContext.Provider value={{ array, points, frequency }}>\n      <SortingActionsContext.Provider value={{ changeFrequency }}>\n        {children}\n      </SortingActionsContext.Provider>\n    </SortingStateContext.Provider>\n  );\n};\n\nconst useSortingState = () => {\n  const context = React.useContext(SortingStateContext);\n  if (context === undefined) {\n    throw new Error('useSortingState must be used within a SortingProvider');\n  }\n\n  return context;\n};\n\nconst useSortingActions = () => {\n  const context = React.useContext(SortingActionsContext);\n  if (context === undefined) {\n    throw new Error('useSortingActions must be used within a SortingProvider');\n  }\n\n  return context;\n};\n\nexport { useSortingState, useSortingActions, SortingProvider };\n","import React, { useEffect, useState } from 'react';\n\nimport { generateArrayOfLength } from 'utils';\n\ntype State = {\n  array: number[];\n  arrayLength: number;\n  customArrayString: string;\n  validCustomArrayString: boolean;\n};\n\ntype Actions = {\n  refreshArray: () => void;\n  setArrayLength: (arg0: number) => void;\n  replaceArray: () => void;\n  setCustomArrayString: (args0: string) => void;\n};\n\nconst ArrayStateContext = React.createContext<State | undefined>(undefined);\nconst ArrayActionsContext = React.createContext<Actions | undefined>(undefined);\n\nconst INITIAL_LENGTH = 100;\nconst INITIAL_ARRAY = generateArrayOfLength(INITIAL_LENGTH);\n\nconst ArrayProvider: React.FC = ({ children }) => {\n  // The length is used for generating new arrays\n  const [arrayLength, setArrayLength] = useState(INITIAL_LENGTH);\n  const [array, setArray] = useState(INITIAL_ARRAY);\n\n  const [customArrayString, setCustomArrayString] = useState('');\n  const validCustomArrayString = !!customArrayString.match(\n    /^(\\d+\\s*,\\s*)+\\d+\\s*$/\n  );\n\n  const generateArray = (n: number) => setArray(generateArrayOfLength(n));\n\n  useEffect(() => {\n    generateArray(arrayLength);\n  }, [arrayLength]);\n\n  const refreshArray = () => generateArray(arrayLength);\n\n  const replaceArray = () => {\n    // Replaces the array with a custom one\n    const arr = customArrayString.split(',').map((el) => parseInt(el));\n    setArray(arr);\n    setArrayLength(arr.length);\n  };\n\n  return (\n    <ArrayStateContext.Provider\n      value={{ array, arrayLength, customArrayString, validCustomArrayString }}\n    >\n      <ArrayActionsContext.Provider\n        value={{\n          setArrayLength,\n          refreshArray,\n          replaceArray,\n          setCustomArrayString,\n        }}\n      >\n        {children}\n      </ArrayActionsContext.Provider>\n    </ArrayStateContext.Provider>\n  );\n};\n\nconst useArrayState = () => {\n  const context = React.useContext(ArrayStateContext);\n  if (context === undefined) {\n    throw new Error('useArrayState must be used within a ArrayProvider');\n  }\n\n  return context;\n};\n\nconst useArrayActions = () => {\n  const context = React.useContext(ArrayActionsContext);\n  if (context === undefined) {\n    throw new Error('useArrayActions must be used within a ArrayProvider');\n  }\n\n  return context;\n};\n\nexport { useArrayState, useArrayActions, ArrayProvider };\n","import React, { useState } from 'react';\n\nimport { useAlgorithmActions, useArrayActions } from 'contexts';\n\ntype Status = 'paused' | 'playing' | 'finished';\n\ntype State = {\n  status: Status;\n  isPlaying: boolean;\n  isFinished: boolean;\n};\n\ntype Actions = {\n  play: () => void;\n  pause: () => void;\n  finish: () => void;\n};\n\nconst StatusStateContext = React.createContext<State | undefined>(undefined);\nconst StatusActionsContext = React.createContext<Actions | undefined>(\n  undefined\n);\n\nconst StatusProvider: React.FC = ({ children }) => {\n  const { refreshArray } = useArrayActions();\n  const { compileAlgorithm } = useAlgorithmActions();\n\n  const [status, setStatus] = useState<Status>('finished');\n  const isPlaying = status === 'playing';\n  const isFinished = status === 'finished';\n\n  const resumePlaying = () => setStatus('playing');\n  const newGame = () => {\n    refreshArray();\n    compileAlgorithm();\n  };\n\n  const play = () => {\n    if (isFinished) newGame();\n    resumePlaying();\n  };\n  const pause = () => setStatus('paused');\n  const finish = () => setStatus('finished');\n\n  return (\n    <StatusStateContext.Provider value={{ status, isPlaying, isFinished }}>\n      <StatusActionsContext.Provider value={{ play, pause, finish }}>\n        {children}\n      </StatusActionsContext.Provider>\n    </StatusStateContext.Provider>\n  );\n};\n\nconst useStatusState = () => {\n  const context = React.useContext(StatusStateContext);\n  if (context === undefined) {\n    throw new Error('useStatusState must be used within a StatusProvider');\n  }\n\n  return context;\n};\n\nconst useStatusActions = () => {\n  const context = React.useContext(StatusActionsContext);\n  if (context === undefined) {\n    throw new Error('useStatusActions must be used within a StatusProvider');\n  }\n\n  return context;\n};\n\nexport { useStatusState, useStatusActions, StatusProvider };\n","import React from 'react';\n\nimport { Button } from 'antd';\n\nimport { useStatusState, useStatusActions } from 'contexts';\n\nconst PlayPauseButton: React.FC = () => {\n  const { isPlaying } = useStatusState();\n  const { play, pause } = useStatusActions();\n\n  return (\n    <Button\n      onClick={() => {\n        isPlaying ? pause() : play();\n      }}\n    >\n      {isPlaying ? 'Pause' : 'Play'}\n    </Button>\n  );\n};\n\nexport default PlayPauseButton;\n","import React from 'react';\n\nimport { Button } from 'antd';\n\nimport { useArrayActions } from 'contexts';\n\nconst RefreshArrayButton: React.FC = () => {\n  const { refreshArray } = useArrayActions();\n\n  return <Button onClick={refreshArray}>New Array</Button>;\n};\n\nexport default RefreshArrayButton;\n","import React from 'react';\n\nimport { Slider, Space } from 'antd';\n\nimport { useArrayState, useArrayActions } from 'contexts';\n\nconst ArrayLengthSlider: React.FC = () => {\n  const { arrayLength } = useArrayState();\n  const { setArrayLength } = useArrayActions();\n\n  return (\n    <Space>\n      Size\n      <Slider\n        className=\"array-length-slider\"\n        value={arrayLength}\n        min={0}\n        max={300}\n        onChange={setArrayLength}\n      />\n    </Space>\n  );\n};\n\nexport default ArrayLengthSlider;\n","import React from 'react';\n\nimport { Slider, Space } from 'antd';\n\nimport { useSortingActions, useSortingState } from 'contexts';\n\nconst FrequencySlider: React.FC = () => {\n  const { frequency } = useSortingState();\n  const { changeFrequency } = useSortingActions();\n\n  return (\n    <Space>\n      Speed\n      <Slider\n        className=\"frequency-slider\"\n        value={frequency}\n        tipFormatter={(n) => `${n} ticks/sec`}\n        min={1}\n        max={120}\n        onChange={changeFrequency}\n      />\n    </Space>\n  );\n};\n\nexport default FrequencySlider;\n","import React from 'react';\n\nimport { Input } from 'antd';\n\nimport { useArrayState, useArrayActions } from 'contexts';\n\nconst ArrayInput: React.FC = () => {\n  const { customArrayString } = useArrayState();\n  const { setCustomArrayString } = useArrayActions();\n\n  return (\n    <Input.TextArea\n      rows={4}\n      placeholder=\"1,2,3,4,5,6\"\n      value={customArrayString}\n      onChange={(e) => {\n        const val = e.target.value;\n        setCustomArrayString(val);\n      }}\n    />\n  );\n};\n\nexport default ArrayInput;\n","import React from 'react';\n\nimport { Button } from 'antd';\n\nimport { useArrayState, useArrayActions } from 'contexts';\n\nconst GenerateButton: React.FC = () => {\n  const { validCustomArrayString } = useArrayState();\n  const { replaceArray } = useArrayActions();\n\n  return (\n    <Button\n      type=\"primary\"\n      onClick={replaceArray}\n      disabled={!validCustomArrayString}\n    >\n      Generate\n    </Button>\n  );\n};\n\nexport default GenerateButton;\n","import React from 'react';\n\nimport { Modal } from 'antd';\n\nimport ArrayInput from './ArrayInput';\nimport GenerateButton from './GenerateButton';\n\ntype Props = {\n  visible: boolean;\n  hide: () => void;\n};\n\nconst ArrayModal: React.FC<Props> = ({ visible, hide }) => {\n  return (\n    <Modal\n      visible={visible}\n      onCancel={hide}\n      footer={<GenerateButton />}\n      title=\"Enter custom Array\"\n    >\n      <ArrayInput />\n    </Modal>\n  );\n};\n\nexport default ArrayModal;\n","import React from 'react';\n\nimport { Button } from 'antd';\n\nimport ArrayModal from './ArrayModal';\n\nimport { useModal } from 'hooks';\n\nconst CustomArrayButton: React.FC = () => {\n  const { isShowing, toggle } = useModal();\n\n  return (\n    <>\n      <Button onClick={toggle}>Custom Array</Button>\n      <ArrayModal visible={isShowing} hide={toggle} />\n    </>\n  );\n};\n\nexport default CustomArrayButton;\n","import React from 'react';\n\nimport { Layout, Space } from 'antd';\n\nimport PlayPauseButton from './PlayPauseButton';\nimport RefreshArrayButton from './RefreshArrayButton';\nimport ArrayLengthSlider from './ArrayLengthSlider';\nimport FrequencySlider from './FrequencySlider';\nimport CustomArrayButton from './CustomArrayButton';\n\nconst Header: React.FC = () => {\n  return (\n    <Layout.Header>\n      <Space wrap>\n        <PlayPauseButton />\n        <RefreshArrayButton />\n        <CustomArrayButton />\n        <ArrayLengthSlider />\n        <FrequencySlider />\n      </Space>\n    </Layout.Header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\nimport { Select } from 'antd';\n\nimport { useAlgorithmState, useAlgorithmActions } from 'contexts';\nimport { camelCaseToCaseText } from '../../utils';\n\nconst AlgorithmSelector: React.FC = () => {\n  const { selectedAlgorithm, algorithmNames } = useAlgorithmState();\n  const { selectAlgorithm } = useAlgorithmActions();\n\n  return (\n    <Select\n      className=\"algorithm-selector\"\n      value={selectedAlgorithm}\n      onChange={selectAlgorithm}\n    >\n      {algorithmNames.map((name) => (\n        <Select.Option value={name} key={name}>\n          {camelCaseToCaseText(name)}\n        </Select.Option>\n      ))}\n    </Select>\n  );\n};\n\nexport default AlgorithmSelector;\n","import React from 'react';\n\nimport AceEditor from 'react-ace';\n\nimport 'ace-builds/src-noconflict/mode-javascript';\nimport 'ace-builds/src-noconflict/theme-monokai';\n\ntype Props = {\n  value: string;\n  onChange: (arg0: string) => void;\n};\n\nconst CodeEditor: React.FC<Props> = ({ value, onChange }) => {\n  return (\n    <AceEditor\n      mode=\"javascript\"\n      theme=\"monokai\"\n      value={value}\n      onChange={onChange}\n      width=\"100%\"\n      height=\"87vh\"\n      showPrintMargin\n      showGutter\n      highlightActiveLine\n      setOptions={{\n        enableBasicAutocompletion: true,\n        enableLiveAutocompletion: true,\n        enableSnippets: true,\n        showLineNumbers: true,\n        tabSize: 2,\n      }}\n    />\n  );\n};\n\nexport default CodeEditor;\n","import React from 'react';\n\ntype Props = {\n  height: number | string;\n  color?: string;\n};\n\nconst Bar: React.FC<Props> = ({ height, color }) => {\n  return <div className=\"bar\" style={{ height, backgroundColor: color }} />;\n};\n\nexport default React.memo(Bar);\n","import React from 'react';\n\nimport { SortingPoints } from 'types';\n\nimport Bar from './Bar';\n\nimport { ValueMapper } from 'utils';\n\ntype Props = {\n  array: number[];\n  points: SortingPoints;\n};\n\nconst ArrayCanvas: React.FC<Props> = ({ array, points }) => {\n  const minBarHeight = 5;\n  const maxBarHeight = 100;\n\n  const minVal = Math.min(...array);\n  const maxVal = Math.max(...array);\n\n  const heightMapper = ValueMapper(\n    [minVal, maxVal],\n    [minBarHeight, maxBarHeight]\n  );\n\n  return (\n    <div className=\"visualizer-canvas\">\n      {array.map((nr, index) => (\n        <Bar key={nr} height={heightMapper(nr) + '%'} color={points[index]} />\n      ))}\n    </div>\n  );\n};\n\nexport default ArrayCanvas;\n","type Interval = [number, number];\n\nexport default function ValueMapper(\n  originalInterval: Interval,\n  targetInterval: Interval\n) {\n  const [low1, high1] = originalInterval;\n  const [low2, high2] = targetInterval;\n\n  return (value: number) => {\n    const val = low2 + ((value - low1) * (high2 - low2)) / (high1 - low1);\n\n    return Math.round(val);\n  };\n}\n","import React from 'react';\n\nimport { CodeEditor } from 'components';\n\nimport { useAlgorithmState, useAlgorithmActions } from 'contexts';\n\nconst AlgorithmEditor: React.FC = () => {\n  const { algorithmString } = useAlgorithmState();\n  const { setAlgorithmString } = useAlgorithmActions();\n\n  return <CodeEditor value={algorithmString} onChange={setAlgorithmString} />;\n};\n\nexport default AlgorithmEditor;\n","import React from 'react';\n\nimport { Layout } from 'antd';\n\nimport AlgorithmSelector from './AlgorithmSelector';\nimport AlgorithmEditor from './AlgorithmEditor';\n\nimport { useWindowSize } from 'hooks';\n\nconst Sider: React.FC = () => {\n  const [windowWidth] = useWindowSize();\n\n  const siderTriggerWidth = 36;\n  const smallWidth = windowWidth - siderTriggerWidth * 2;\n  const bigWidth = 400;\n  const siderWidth = Math.min(smallWidth, bigWidth);\n\n  return (\n    <Layout.Sider collapsible collapsedWidth={0} width={siderWidth}>\n      <AlgorithmSelector />\n      <AlgorithmEditor />\n    </Layout.Sider>\n  );\n};\n\nexport default Sider;\n","import React from 'react';\n\nimport { useSortingState } from 'contexts';\n\nimport { ArrayCanvas } from 'components';\n\nconst Visualizer: React.FC = () => {\n  const { array, points } = useSortingState();\n\n  return <ArrayCanvas array={array} points={points} />;\n};\n\nexport default Visualizer;\n","import React from 'react';\n\nimport { Layout } from 'antd';\n\nimport Visualizer from './Visualizer';\n\nconst Content: React.FC = () => {\n  return (\n    <Layout.Content>\n      <Visualizer />\n    </Layout.Content>\n  );\n};\n\nexport default Content;\n","import React from 'react';\n\nimport { Layout } from 'antd';\n\nimport Header from './Header';\nimport Sider from './Sider';\nimport Content from './Content';\n\nconst App: React.FC = () => {\n  return (\n    <Layout>\n      <Header />\n      <Layout>\n        <Sider />\n        <Content />\n      </Layout>\n    </Layout>\n  );\n};\n\nexport default App;\n","import React from 'react';\n\nimport * as providers from './contexts';\n\nconst ContextProvider: React.FC = ({ children }) => {\n  return (\n    <providers.ArrayProvider>\n      <providers.AlgorithmProvider>\n        <providers.StatusProvider>\n          <providers.SortingProvider>{children}</providers.SortingProvider>\n        </providers.StatusProvider>\n      </providers.AlgorithmProvider>\n    </providers.ArrayProvider>\n  );\n};\n\nexport default ContextProvider;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport ContextProvider from './ContextProvider';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'antd/dist/antd.css';\nimport './styles/global.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ContextProvider>\n      <App />\n    </ContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","const selectionSort = `\nsortingAlgorithm = function* (arr) {\n  const n = arr.length;\n\n  for (let i = 0; i < n; i++) {\n    let min = i;\n    for (let j = i + 1; j < n; j++) {\n      if (arr[j] < arr[min]) {\n        min = j;\n      }\n\n      yield { i, j };\n    }\n\n    if (min != i) {\n      const tmp = arr[i];\n      arr[i] = arr[min];\n      arr[min] = tmp;\n    }\n  }\n};\n`;\n\nexport default selectionSort;\n","const bubbleSort = `\nsortingAlgorithm = function* (arr) {\n  const n = arr.length;\n  let swapped;\n\n  for (let i = 0; i < n - 1; i++) {\n    swapped = false;\n    for (let j = 0; j < n - i - 1; j++) {\n      if (arr[j] > arr[j + 1]) {\n        const tmp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = tmp;\n        swapped = true;\n      }\n\n      yield {i, j1: j, j2: j+1};\n    }\n\n    if (swapped == false) break;\n  }\n};\n`;\n\nexport default bubbleSort;\n","const mergeSort = `\nfunction* mergeArray(arr, start, mid, end) {\n  let start2 = mid + 1;\n\n  if (arr[mid] <= arr[start2]) {\n    return;\n  }\n\n  while (start <= mid && start2 <= end) {\n    if (arr[start] <= arr[start2]) {\n      start++;\n    } else {\n      const value = arr[start2];\n      let index = start2;\n\n      while (index != start) {\n        arr[index] = arr[index - 1];\n        index--;\n      }\n      arr[start] = value;\n\n      start++;\n      mid++;\n      start2++;\n      yield { start, mid };\n    }\n  }\n}\n\nfunction* sort(arr, l, r) {\n  if (l < r) {\n    const m = Math.floor(l + (r - l) / 2);\n\n    yield* sort(arr, l, m);\n    yield* sort(arr, m + 1, r);\n\n    yield* mergeArray(arr, l, m, r);\n  }\n}\n\nsortingAlgorithm = function* (arr) {\n  yield* sort(arr, 0, arr.length - 1);\n};\n`;\n\nexport default mergeSort;\n","const quickSort = `\nfunction* partition(arr, left, right) {\n    const pivot = arr[Math.floor((right + left) / 2)];\n    let i = left;\n    let j = right;\n    \n    while (i <= j) {\n        while (arr[i] < pivot) {\n            i++;\n        }\n        while (arr[j] > pivot) {\n            j--;\n        }\n        if (i <= j) {\n            const temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i++;\n            j--;\n        }\n        yield {i, j};\n    }\n    return i;\n}\n\nfunction* quickSort(arr, left, right) {\n    let index;\n    if (arr.length > 1) {\n        index = yield * partition(arr, left, right);\n        if (left < index - 1) {\n            yield* quickSort(arr, left, index - 1);\n        }\n        if (index < right) {\n            yield* quickSort(arr, index, right);\n        }\n    }\n}\n\nsortingAlgorithm = function* (arr) {\n  yield* quickSort(arr, 0, arr.length - 1);\n};\n`;\n\nexport default quickSort;\n","const bubbleSort = `\nsortingAlgorithm = function* (arr) {\n  let n = arr.length;\n  \n  for (let gap = Math.floor(n/2); gap > 0; gap = Math.floor(gap/2)){\n    for (let i = gap; i < n; i += 1)  {\n      let temp = arr[i];\n  \n      let j;\n      for (j = i; j >= gap && arr[j-gap] > temp; j-=gap)  {\n        arr[j] = arr[j-gap];\n      }\n  \n      arr[j] = temp;\n      yield {i, j};\n    }\n  }\n}\n`;\n\nexport default bubbleSort;\n","const heapSort = `\nfunction* max_heapify(arr,i,n){\n    let left = 2 * i;\n    let right = 2 * i + 1;\n    let maximum;\n    if (right < n) {\n        if (arr[left] >= arr[right]) {\n            maximum = left;\n        }\n        else{\n            maximum = right;\n        }\n    }\n    else if (left < n) {\n        maximum = left;\n    }\n    else return;\n    if (arr[i] < arr[maximum]) {\n        const temp = arr[i];\n        arr[i] = arr[maximum];\n        arr[maximum] = temp;\n        yield {i, maximum};\n        yield* max_heapify(arr, maximum, n);\n    }\n    return;\n}\n\nsortingAlgorithm = function* (arr) {\n  let n = arr.length;\n  for(let i = Math.floor(n/2)-1; i >= 0; i--){\n      yield* max_heapify(arr,i,n);\n  }\n  for(let i = n-1;i>=0;i--){\n      const temp = arr[0];\n      arr[0] = arr[i];\n      arr[i] = temp;\n      yield { i };\n      yield* max_heapify(arr,0,i);\n  }\n};\n`;\n\nexport default heapSort;\n","const bubbleSort = `\nsortingAlgorithm = function* (arr) {\n  // your code here\n  // use yield {<your-keys>} to display \n  // the steps of the algorithm\n  // i.e yield {i, j};\n};\n`;\n\nexport default bubbleSort;\n","import React, { useEffect, useState } from 'react';\n\nimport * as algorithms from 'algorithms';\nimport { SortingFunction } from 'types';\n\ntype AlgorithmName = keyof typeof algorithms;\n\ntype State = {\n  algorithmString: string;\n  algorithm?: SortingFunction;\n  algorithmNames: AlgorithmName[];\n  selectedAlgorithm?: AlgorithmName;\n};\n\ntype Actions = {\n  setAlgorithmString: (arg0: string) => void;\n  compileAlgorithm: () => void;\n  selectAlgorithm: (arg0: AlgorithmName) => void;\n};\n\nconst AlgorithmStateContext = React.createContext<State | undefined>(undefined);\nconst AlgorithmActionsContext = React.createContext<Actions | undefined>(\n  undefined\n);\n\nconst algorithmNames = Object.keys(algorithms) as AlgorithmName[];\n\nconst AlgorithmProvider: React.FC = ({ children }) => {\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmName>(\n    'mergeSort'\n  );\n  const [algorithmString, setAlgorithmString] = useState(algorithms.mergeSort);\n  const [algorithm, setAlgorithm] = useState<SortingFunction | undefined>();\n\n  const selectAlgorithm = (name: AlgorithmName) => {\n    setSelectedAlgorithm(name);\n    setAlgorithmString(algorithms[name]);\n  };\n\n  const compileAlgorithm = () => {\n    let sortingAlgorithm: SortingFunction;\n    eval(algorithmString);\n    setAlgorithm(() => sortingAlgorithm);\n  };\n\n  useEffect(compileAlgorithm, [selectedAlgorithm]);\n\n  return (\n    <AlgorithmStateContext.Provider\n      value={{ algorithm, algorithmString, algorithmNames, selectedAlgorithm }}\n    >\n      <AlgorithmActionsContext.Provider\n        value={{ setAlgorithmString, compileAlgorithm, selectAlgorithm }}\n      >\n        {children}\n      </AlgorithmActionsContext.Provider>\n    </AlgorithmStateContext.Provider>\n  );\n};\n\nconst useAlgorithmState = () => {\n  const context = React.useContext(AlgorithmStateContext);\n  if (context === undefined) {\n    throw new Error(\n      'useAlgorithmState must be used within a AlgorithmProvider'\n    );\n  }\n\n  return context;\n};\n\nconst useAlgorithmActions = () => {\n  const context = React.useContext(AlgorithmActionsContext);\n  if (context === undefined) {\n    throw new Error(\n      'useAlgorithmActions must be used within a AlgorithmProvider'\n    );\n  }\n\n  return context;\n};\n\nexport { useAlgorithmState, useAlgorithmActions, AlgorithmProvider };\n"],"sourceRoot":""}